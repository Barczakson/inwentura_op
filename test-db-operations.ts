import { db } from './src/lib/db-config'\nimport { v4 as uuidv4 } from 'uuid'\n\nasync function testDatabaseOperations() {\n  try {\n    console.log('Testing database operations...')\n    \n    // Test connection\n    await db.$connect()\n    console.log('‚úÖ Database connected successfully')\n    \n    // Test creating an ExcelFile record (similar to what happens in upload)\n    console.log('Testing ExcelFile creation...')\n    const testFile = await db.excelFile.create({\n      data: {\n        fileName: 'test-file.xlsx',\n        fileSize: 1024,\n        rowCount: 5,\n        originalStructure: [{ type: 'header', content: 'Test Header' }],\n        columnMapping: { nameColumn: 1, quantityColumn: 2, unitColumn: 3, headerRow: 1 },\n        detectedHeaders: ['L.p.', 'Name', 'Quantity', 'Unit']\n      }\n    })\n    console.log('‚úÖ ExcelFile created successfully:', testFile.id)\n    \n    // Test creating ExcelRow records\n    console.log('Testing ExcelRow creation...')\n    const testRows = await db.excelRow.createMany({\n      data: [\n        {\n          id: uuidv4(),\n          name: 'Test Item 1',\n          quantity: 10,\n          unit: 'kg',\n          originalRowIndex: 1,\n          fileId: testFile.id\n        },\n        {\n          id: uuidv4(),\n          name: 'Test Item 2',\n          quantity: 5,\n          unit: 'l',\n          originalRowIndex: 2,\n          fileId: testFile.id\n        }\n      ],\n      skipDuplicates: true\n    })\n    console.log('‚úÖ ExcelRows created successfully:', testRows)\n    \n    // Test creating AggregatedItem records\n    console.log('Testing AggregatedItem creation...')\n    const testAggregated = await db.aggregatedItem.create({\n      data: {\n        id: uuidv4(),\n        name: 'Test Aggregated Item',\n        quantity: 15,\n        unit: 'kg',\n        sourceFiles: [testFile.id],\n        count: 1\n      }\n    })\n    console.log('‚úÖ AggregatedItem created successfully:', testAggregated.id)\n    \n    // Test querying data\n    console.log('Testing data queries...')\n    const files = await db.excelFile.findMany()\n    console.log('‚úÖ ExcelFiles query successful, found:', files.length)\n    \n    const rows = await db.excelRow.findMany()\n    console.log('‚úÖ ExcelRows query successful, found:', rows.length)\n    \n    const aggregated = await db.aggregatedItem.findMany()\n    console.log('‚úÖ AggregatedItems query successful, found:', aggregated.length)\n    \n    // Clean up test data\n    console.log('Cleaning up test data...')\n    await db.aggregatedItem.deleteMany({\n      where: {\n        id: testAggregated.id\n      }\n    })\n    \n    await db.excelRow.deleteMany({\n      where: {\n        fileId: testFile.id\n      }\n    })\n    \n    await db.excelFile.delete({\n      where: {\n        id: testFile.id\n      }\n    })\n    \n    console.log('‚úÖ Test data cleaned up successfully')\n    \n    await db.$disconnect()\n    console.log('‚úÖ Database disconnected successfully')\n    \n    console.log('\nüéâ All database operations completed successfully!')\n  } catch (error) {\n    console.log('‚ùå Database operations test failed:')\n    console.log('Error:', error)\n    \n    if (error instanceof Error) {\n      console.log('Error message:', error.message)\n      console.log('Stack trace:', error.stack)\n    }\n    \n    // Try to disconnect even if there was an error\n    try {\n      await db.$disconnect()\n    } catch (disconnectError) {\n      console.log('Error disconnecting from database:', disconnectError)\n    }\n    \n    process.exit(1)\n  }\n}\n\ntestDatabaseOperations()